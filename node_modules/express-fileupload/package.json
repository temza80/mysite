{
  "name": "express-fileupload",
  "version": "0.0.6",
  "author": {
    "name": "Richard Girges",
    "email": "richardgirges@gmail.com"
  },
  "description": "Simple express file upload middleware that wraps around connect-busboy",
  "main": "./lib/index",
  "dependencies": {
    "connect-busboy": "0.0.2",
    "fs-extra": "^0.22.1",
    "streamifier": "^0.1.1"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "keywords": [
    "express",
    "file-upload",
    "upload",
    "forms",
    "multipart",
    "files",
    "connect-busboy",
    "middleware"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/richardgirges/express-fileupload/raw/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/richardgirges/express-fileupload"
  },
  "devDependencies": {
    "express": "^4.13.4"
  },
  "readme": "# Description\nSimple express middleware for uploading files.\n\n# Install\n```bash\n# With NPM\nnpm install --save express-fileupload\n\n# With Yarn\nyarn add express-fileupload\n```\n\n# Usage\nWhen you upload a file, the file will be accessible from `req.files`.\n\n### Example Scenario\n* You're uploading a file called **car.jpg**\n* Your input's name field is **foo**: `<input name=\"foo\" type=\"file\" />`\n* In your express server request, you can access your uploaded file from `req.files.foo`:\n```javascript\napp.post('/upload', function(req, res) {\n  console.log(req.files.foo); // the uploaded file object\n});\n```\nThe **req.files.foo** object will contain the following:\n* `req.files.foo.name`: \"car.jpg\"\n* `req.files.foo.mv`: A function to move the file elsewhere on your server\n* `req.files.mimetype`: The mimetype of your file\n* `req.files.data`: A buffer representation of your file\n\n### Full Example\n**Your node.js code:**\n```javascript\nvar express = require('express');\nvar fileUpload = require('express-fileupload');\nvar app = express();\n\n// default options\napp.use(fileUpload());\n\napp.post('/upload', function(req, res) {\n  var sampleFile;\n\n  if (!req.files) {\n    res.send('No files were uploaded.');\n    return;\n  }\n\n  // The name of the input field (i.e. \"sampleFile\") is used to retrieve the uploaded file\n  sampleFile = req.files.sampleFile;\n\n  // Use the mv() method to place the file somewhere on your server\n  sampleFile.mv('/somewhere/on/your/server/filename.jpg', function(err) {\n    if (err) {\n      res.status(500).send(err);\n    }\n    else {\n      res.send('File uploaded!');\n    }\n  });\n});\n```\n\n**Your HTML file upload form:**\n```html\n<html>\n  <body>\n    <form ref='uploadForm' \n      id='uploadForm' \n      action='http://localhost:8000/upload' \n      method='post' \n      encType=\"multipart/form-data\">\n        <input type=\"file\" name=\"sampleFile\" />\n        <input type='submit' value='Upload!' />\n    </form>     \n  </body>\n</html>\n```\n\n### Uploading Multiple Files\nexpress-fileupload supports multiple file uploads at the same time.\n\nLet's say you have three files in your form, each of the inputs with the name `my_profile_pic`, `my_pet`, and `my_cover_photo`:\n```html\n<input type=\"file\" name=\"my_profile_pic\" />\n<input type=\"file\" name=\"my_pet\" />\n<input type=\"file\" name=\"my_cover_photo\" />\n```\n\nThese uploaded files would be accessible like so:\n```javascript\napp.post('/upload', function(req, res) {\n  // Uploaded files:\n  console.log(req.files.my_profile_pic.name);\n  console.log(req.files.my_pet.name);\n  console.log(req.files.my_cover_photo.name);\n});\n```\n\n### Using Busboy Options\nPass in Busboy options directly to the express-fileupload middleware. [Check out the Busboy documentation here.](https://github.com/mscdex/busboy#api)\n\n```javascript\napp.use(fileUpload({\n  limits: { fileSize: 50 * 1024 * 1024 },\n}));\n```\n\n### Available Options\nPass in non-Busboy options directly to the middleware. These are express-fileupload specific options.\n\nOption | Acceptable&nbsp;Values | Details\n--- | --- | ---\nsafeFileNames | <ul><li><code>false</code>&nbsp;**(default)**</li><li><code>true</code></li><li>regex</li></ul> | Strips characters from the upload's filename. You can use custom regex to determine what to strip. If set to `true`, non-alphanumeric characters _except_ dashes and underscores will be stripped. This option is off by default.<br /><br />**Example #1 (strip slashes from file names):** `app.use(fileUpload({ safeFileNames: /\\\\/g }))`<br />**Example #2:** `app.use(fileUpload({ safeFileNames: true }))`\n\n# Known Bugs\n##### If you're using bodyParser middleware\nAdd `app.use(fileUpload())` *AFTER* `app.use(bodyParser.json)` and any other `bodyParser` middlewares! This limitation will be investigated in an upcoming release.\n\n# Help Wanted\nPull Requests are welcomed!\n\n# Thanks & Credit\n[Brian White](https://github.com/mscdex) for his stellar work on the [Busboy Package](https://github.com/mscdex/busboy) and the [connect-busboy Package](https://github.com/mscdex/connect-busboy)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/richardgirges/express-fileupload/issues"
  },
  "_id": "express-fileupload@0.0.6",
  "dist": {
    "shasum": "08dc4eb93c5f6ade0cc3f62307f67042d516aba3"
  },
  "_from": "express-fileupload@",
  "_resolved": "https://registry.npmjs.org/express-fileupload/-/express-fileupload-0.0.6.tgz"
}
